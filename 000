using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public static class EncryptionHelper
{
    private static byte[] GetAesKey(string key)
    {
        var keyBytes = Encoding.UTF8.GetBytes(key);
        if (keyBytes.Length == 16 || keyBytes.Length == 24 || keyBytes.Length == 32)
        {
            return keyBytes;
        }

        var paddedKey = new byte[16];
        Array.Copy(keyBytes, paddedKey, Math.Min(keyBytes.Length, paddedKey.Length));
        return paddedKey;
    }

    public static string Decrypt(string encryptedText, string key)
    {
        try
        {
            var fullCipher = Convert.FromBase64String(encryptedText);
            var iv = new byte[16];
            var cipher = new byte[fullCipher.Length - iv.Length];

            Array.Copy(fullCipher, iv, iv.Length);
            Array.Copy(fullCipher, iv.Length, cipher, 0, cipher.Length);

            var keyBytes = GetAesKey(key);

            using (var aes = Aes.Create())
            {
                aes.IV = iv;
                aes.Key = keyBytes;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    using (var msDecrypt = new MemoryStream(cipher))
                    {
                        using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                        {
                            using (var srDecrypt = new StreamReader(csDecrypt))
                            {
                                return srDecrypt.ReadToEnd();
                            }
                        }
                    }
                }
            }
        }
        catch (CryptographicException ex)
        {
            throw new Exception("Error during decryption (CryptographicException): " + ex.Message);
        }
        catch (Exception ex)
        {
            throw new Exception("Error during decryption (General): " + ex.Message);
        }
    }
}
